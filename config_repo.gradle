ext {
    MAVEN_REPOSITORIES = {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url 'http://ct.y.qq.com/TVapp/nexus/repository/maven-public/'
            credentials {
                username 'tvsdk_client'
                password 'tvsdk-client'
            }
            allowInsecureProtocol true
        }

        def localPropertiesFile = file("local.properties")
        def useSdkSource = false
        if (localPropertiesFile.exists()) {
            def localProperties = new Properties()
            localProperties.load(new FileInputStream(localPropertiesFile))
            useSdkSource = localProperties.getProperty("useSdkSource", "false").toBoolean()
        }
        if (useSdkSource) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
            maven { url "https://mirrors.tencent.com/repository/maven/QQMusicSnapshots" }
            maven { url "https://mirrors.tencent.com/repository/maven/QQMusicRelease" }
        }
    }

    kotlin_version = "1.6.10"
    compose_version = '1.1.1'
    kotlin_coroutine_android_version = '1.5.1'

    enable_minify = false

    sdk_version = project.hasProperty('edge_version') && "${edge_version}" != ""
            ? "${edge_version}"
            : "3.0.0"

    println "apk demo sdk_version:$sdk_version"

    appVersionCode = 2
    appVersionName = sdk_version

    minSdkVersion = 21
    targetSdkVersion = 30
    compileSdkVersion = 32

    androidx_core_version = "1.1.0"
    androidx_compat_version = "1.0.0"
    androidx_anno_version = "1.1.0"
    androidx_media_version = "1.0.0"
    google_material_version = "1.0.0"
    common_util_version = "1.2.13-edge"
    mmkv_version = "1.2.16"
    sdkmethodmonitor = "0.0.1"

    useDebugrootProject = {
        def localPropertiesFile = file("local.properties")

        if (localPropertiesFile.exists()) {
            def localProperties = new Properties()
            localProperties.load(new FileInputStream(localPropertiesFile))
            return localProperties.getProperty("useDebugInfoSource", "false").toBoolean()
        }
        return false
    }

    gson_version = "2.8.8"

    isDebugBuild = {
        org.gradle.api.invocation.Gradle gradle = getGradle()
        if (gradle != null) {
            List<org.gradle.TaskExecutionRequest> taskRequests = gradle.getStartParameter().getTaskRequests()
            println "+++++++++++++++ taskRequests = " + taskRequests
            if (taskRequests != null) {
                for (int i = 0; i < taskRequests.size(); i++) {
                    org.gradle.TaskExecutionRequest taskRequest = taskRequests.get(i)
                    List<String> taskArgs = taskRequest.args
                    if (taskArgs != null) {
                        for (int j = 0; j < taskArgs.size(); j++) {
                            String taskArg = taskArgs.get(j)
                            println "+++++++++++++++ taskArg = " + taskArg
                            if (taskArg.matches(".*Debug")) {
                                return true
                            }
                        }
                    }
                }
            }
        }

        return false
    }
}